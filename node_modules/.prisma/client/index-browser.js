
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.2.1
 * Query Engine version: 2920a97877e12e055c1333079b8d19cee7f33826
 */
Prisma.prismaVersion = {
  client: "4.2.1",
  engine: "2920a97877e12e055c1333079b8d19cee7f33826"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Admin_Email_SMS_SettingScalarFieldEnum = makeEnum({
  id: 'id'
});

exports.Prisma.Admin_Main_SettingScalarFieldEnum = makeEnum({
  id: 'id',
  system_name: 'system_name',
  backgroundColor: 'backgroundColor',
  fontColor: 'fontColor',
  alertFormat: 'alertFormat',
  state_to_import_wheather_alert: 'state_to_import_wheather_alert',
  logo: 'logo',
  domain: 'domain',
  CAD_URL: 'CAD_URL',
  private_system: 'private_system',
  guest_not_allowed_to_chat: 'guest_not_allowed_to_chat',
  theme: 'theme',
  fontSize: 'fontSize',
  traineeAlertColor: 'traineeAlertColor'
});

exports.Prisma.Chat_MessagesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  Message: 'Message',
  createdAt: 'createdAt',
  userId: 'userId'
});

exports.Prisma.IncidentScalarFieldEnum = makeEnum({
  id: 'id',
  User_ID: 'User_ID',
  Co_Credit: 'Co_Credit',
  Country: 'Country',
  Time: 'Time',
  Type: 'Type',
  Street: 'Street',
  City: 'City',
  State: 'State',
  Longitude: 'Longitude',
  Latitude: 'Latitude',
  Zipcode: 'Zipcode',
  Text: 'Text',
  SMS_Chr_Count: 'SMS_Chr_Count',
  Internal_Note: 'Internal_Note',
  Confirmed_Incident: 'Confirmed_Incident'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.ResidenceScalarFieldEnum = makeEnum({
  id: 'id',
  city: 'city',
  address: 'address',
  state: 'state',
  ZipCode: 'ZipCode',
  DateOfBirth: 'DateOfBirth',
  Occupation: 'Occupation',
  userId: 'userId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  role: 'role'
});

exports.Prisma.User_ProfileScalarFieldEnum = makeEnum({
  id: 'id',
  realName: 'realName',
  phoneNo: 'phoneNo',
  carrier: 'carrier',
  alertType: 'alertType',
  pagerEmail: 'pagerEmail',
  notificationArea: 'notificationArea',
  notificationTypes: 'notificationTypes',
  personalInfo: 'personalInfo',
  sendToEmail: 'sendToEmail',
  sendTextNotification: 'sendTextNotification',
  sendToPager: 'sendToPager',
  userId: 'userId'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  User_Profile: 'User_Profile',
  Residence: 'Residence',
  Incident: 'Incident',
  Chat_Messages: 'Chat_Messages',
  Admin_Main_Setting: 'Admin_Main_Setting',
  Admin_Email_SMS_Setting: 'Admin_Email_SMS_Setting'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
